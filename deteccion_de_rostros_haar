//ROS headers
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/objdetect.hpp"
#include <opencv2/face.hpp>


using namespace std;
using namespace cv;

static const std::string TOPIC_NAME = "/pepper/camera/front/image_raw";
static const std::string OPENCV_WINDOW = "raw_image_window";
static const std::string OPENCV_WINDOW_1 = "face_detector";
void detectAndDraw( Mat& img, CascadeClassifier& cascade);

class Face_Detector
{
  ros::NodeHandle nh;
  image_transport::ImageTransport it;
  image_transport::Subscriber image_sub;
  image_transport::Publisher image_pub;
  
  string input_image_topic, output_image_topic, haar_file_face;
  int face_tracking, display_original_image, display_tracking_image, center_offset, screenmaxx;
  public:
  
  Face_Detector() : it(nh)
  {
      image_sub = it.subscribe(TOPIC_NAME, 1,&Face_Detector::imageCb, this);
	
  haar_file_face = "/home/marco/opencv-3.4.0/data/haarcascades/haarcascade_frontalface_default.xml";
  }

  ~Face_Detector()
  {
    	cv::destroyWindow(OPENCV_WINDOW);
  }

void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {

    cv_bridge::CvImagePtr cv_ptr;
    namespace enc = sensor_msgs::image_encodings;

    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

	    string cascadeName = haar_file_face;
            CascadeClassifier cascade;
	    if( !cascade.load( cascadeName ) )
	    {
		cerr << "ERROR: Could not load classifier cascade" << endl;
		
	    }

	    display_original_image = 1;
	    if (display_original_image == 1){
		imshow("Original Image", cv_ptr->image);
	    }
 	    detectAndDraw(cv_ptr->image, cascade);
            image_pub.publish(cv_ptr->toImageMsg());

            waitKey(30);
}  
};

//detectAndDraw( cv_ptr->image, cascade );

void detectAndDraw(Mat& img, CascadeClassifier& cascade){
	
        double scale = 1;
        vector<Rect> faces, faces2;
	Mat gray, smallImg;
	
	

	cvtColor(img, gray, COLOR_BGR2GRAY); // Convert to Gray Scale 
	double fx = 1 / scale;

	// Resize the Grayscale Image 
	resize(gray, smallImg, Size(), fx, fx, INTER_LINEAR);
	equalizeHist(smallImg, smallImg);

	// Detect faces of different sizes using cascade classifier 
	cascade.detectMultiScale(smallImg, faces, 1.2,1, 0 | CASCADE_SCALE_IMAGE,Size(30, 30));

	// Draw circles around the faces 
	for (size_t i = 0; i < faces.size(); i++){
		Rect r = faces[i];
		Mat smallImgROI;
		vector<Rect> nestedObjects;
		Point center;
		Scalar color = Scalar(255, 255, 0); // Color for Drawing tool 
		int radius;

		double aspect_ratio = (double)r.width / r.height;
		if (0.75 < aspect_ratio && aspect_ratio < 1.3)
{
			center.x = cvRound((r.x + r.width*0.5)*scale);
			center.y = cvRound((r.y + r.height*0.5)*scale);
			radius = cvRound((r.width + r.height)*0.5*scale);
			circle(img, center, radius, color, 3, 8, 0);

			cv::putText(img, "Face", center, 2, 0.7, color, 2, cv::LINE_AA); 


		}
		else
			rectangle(img, cvPoint(cvRound(r.x*scale), cvRound(r.y*scale)),
				cvPoint(cvRound((r.x + r.width - 1)*scale),
					cvRound((r.y + r.height - 1)*scale)), color, 3, 8, 0);
		
		}

	// Show Processed Image with detected faces 
	imshow("Face Detection", img);
}



int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_transport_subscriber");
   
  
  Face_Detector ic;
  ros::spin();
  return 0;
}



